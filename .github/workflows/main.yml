name: main

on: [ push, workflow_dispatch ]

jobs:
  analyze:
    name: Run analyzer and formatter
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.5'
          cache: true
      - run: flutter pub get
      - run: flutter analyze
      - run: dart format --set-exit-if-changed lib/

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.5'
          cache: true
      - run: flutter pub get
      - run: flutter test
        id: test
      - if: ${{ failure() && steps.test.conclusion == 'failure' }}
        name: 'Upload test failures'
        uses: actions/upload-artifact@v3
        with:
          name: test-failures
          path: test/failures
          retention-days: 5

  #  integration-test:
  #    needs: [ analyze, test ]
  #    name: Run integration test
  #    runs-on: macos-11
  #    timeout-minutes: 25
  #    strategy:
  #      matrix:
  #        api-level:
  #          - 29
  #      fail-fast: true
  #    steps:
  #      - uses: actions/checkout@v3
  #      - name: Setup Flutter SDK
  #        uses: subosito/flutter-action@v2
  #        with:
  #          channel: stable
  #      - name: Set up JDK 11
  #        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.11.0
  #        with:
  #          java-version: 11
  #          distribution: temurin
  #      - name: Install Flutter dependencies
  #        run: flutter pub get
  #
  #      - name: Create google-services.json file
  #        run: |
  #          touch ./android/app/google-services.json
  #          touch ./android/app/src/development/google-services.json
  #          touch ./android/app/src/production/google-services.json
  #      - name: Set up google-services.json file
  #        env:
  #          SERVICES: ${{ secrets.SERVICES }}
  #          SERVICES_DEV: ${{ secrets.SERVICES_DEV }}
  #        run: |
  #          echo $SERVICES > ./android/app/google-services.json
  #          echo $SERVICES > ./android/app/src/production/google-services.json
  #          echo $SERVICES_DEV > ./android/app/src/development/google-services.json
  #
  #      - name: Run integration tests
  #        uses: reactivecircus/android-emulator-runner@v2
  #        with:
  #          api-level: ${{ matrix.api-level }}
  #          arch: x86_64
  #          profile: Nexus 6
  #          script: flutter test integration_test --verbose --flavor development
  build:
    needs: [ analyze, test, integration-test ]
    name: Build android on Ubuntu
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Set up JDK 11
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.10.5
        with:
          java-version: 11
          distribution: temurin

      - name: Create google-services.json file
        run: |
          touch ./android/app/google-services.json
          touch ./android/app/src/development/google-services.json
          touch ./android/app/src/production/google-services.json
      - name: Set up google-services.json file
        env:
          SERVICES: ${{ secrets.SERVICES }}
          SERVICES_DEV: ${{ secrets.SERVICES_DEV }}
        run: |
          echo $SERVICES > ./android/app/google-services.json
          echo $SERVICES > ./android/app/src/production/google-services.json
          echo $SERVICES_DEV > ./android/app/src/development/google-services.json

      - name: Build apk for android
        env:
          TOKEN: ${{ secrets.TOKEN }}
          PATH_API: ${{ secrets.PATH_API }}
          API_KEY: ${{ secrets.API_KEY }}
          APP_ID: ${{ secrets.APP_ID }}
          MESSAGING_SENDER_ID: ${{ secrets.MESSAGING_SENDER_ID }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          STORAGE_BUCKET: ${{ secrets.STORAGE_BUCKET }}
        run: |
          flutter build apk --split-per-abi --flavor production --target lib/main_production.dart --dart-define=TOKEN=$TOKEN --dart-define=PATH_API=$PATH_API --dart-define=API_KEY=$API_KEY --dart-define=APP_ID=$APP_ID --dart-define=MESSAGING_SENDER_ID=$MESSAGING_SENDER_ID --dart-define=PROJECT_ID=$PROJECT_ID --dart-define=STORAGE_BUCKET=$STORAGE_BUCKET
          flutter build apk --flavor production --target lib/main_production.dart --dart-define=TOKEN=$TOKEN --dart-define=PATH_API=$PATH_API --dart-define=API_KEY=$API_KEY --dart-define=APP_ID=$APP_ID --dart-define=MESSAGING_SENDER_ID=$MESSAGING_SENDER_ID --dart-define=PROJECT_ID=$PROJECT_ID --dart-define=STORAGE_BUCKET=$STORAGE_BUCKET

      - uses: actions/upload-artifact@v3
        with:
          name: note
          path: build/app/outputs/flutter-apk/app-production-release.apk
      - uses: actions/upload-artifact@v3
        with:
          name: note-arm-v8a
          path: build/app/outputs/flutter-apk/app-arm64-v8a-production-release.apk
      - uses: actions/upload-artifact@v3
        with:
          name: note-arm-v7a
          path: build/app/outputs/flutter-apk/app-armeabi-v7a-production-release.apk
      - uses: actions/upload-artifact@v3
        with:
          name: note-x86-64
          path: build/app/outputs/flutter-apk/app-x86_64-production-release.apk

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-production-release.apk